name: Publish to NPM and GitHub Releases

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'

jobs:
  wait-for-checks:
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.check_status.outputs.tests_passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for other workflows to complete
      run: |
        echo "Waiting for other workflows to complete..."
        # Wait up to 10 minutes for other workflows
        for i in {1..60}; do
          sleep 10
          
          # Check if there are any pending or in_progress checks
          PENDING=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs --jq '.check_runs[] | select(.status != "completed") | .name' | wc -l)
          
          if [ "$PENDING" -eq 0 ]; then
            echo "All checks completed"
            break
          fi
          
          echo "Waiting... ($i/60) - $PENDING checks still running"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check if all required workflows passed
      id: check_status
      run: |
        # Get all check runs for this commit
        FAILED=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs --jq '.check_runs[] | select(.conclusion != "success" and .conclusion != "skipped" and .conclusion != null) | .name' | wc -l)
        
        if [ "$FAILED" -gt 0 ]; then
          echo "❌ Some checks failed:"
          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs --jq '.check_runs[] | select(.conclusion != "success" and .conclusion != "skipped" and .conclusion != null) | "  - \(.name): \(.conclusion)"'
          echo "tests_passed=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ All checks passed"
          echo "tests_passed=true" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-version:
    needs: wait-for-checks
    if: needs.wait-for-checks.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if version is new
      id: check
      run: |
        VERSION=$(node -p "require('./package.json').version")
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        
        # Check if version is already published on NPM
        if npm view "$PACKAGE_NAME@$VERSION" version 2>/dev/null; then
          echo "Version $VERSION already published"
          echo "should_publish=false" >> $GITHUB_OUTPUT
        else
          echo "New version $VERSION detected"
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi

  publish:
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for publishing packages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Make scripts executable
      run: |
        chmod +x hive.mjs
        chmod +x solve.mjs
        
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ needs.check-version.outputs.version }}
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        gh release create "v${VERSION}" \
          --title "${VERSION}" \
          --notes "https://www.npmjs.com/package/${PACKAGE_NAME}/v/${VERSION}"